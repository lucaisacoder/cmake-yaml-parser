include(cyp-define)
include(cyp-basic)

macro(cyp_parser_char)
    if(DEFINED global_char)
        cyp_get_char()
        if(${global_char} IN_LIST _cyp_indicator)
            set(global_word_last "${global_word}")
            cyp_print(${global_word})
            cyp_print(${global_word_last})
            set(global_word "")
        else()
            string(APPEND global_word ${global_char})
        endif()
    endif()
endmacro(cyp_parser_char)

macro(cyp_parser_line _line_content)
    cyp_print(${_line_content})
endmacro(cyp_parser_line)

macro(cyp_get_indent _line_content)
    set(_line_index "0")
    string(LENGTH ${_line_content} _line_length)
    while(${_line_index} LESS ${_line_length})
        string(SUBSTRING "${_line_content}" ${_line_index} 1 _char)
        cyp_print("NOT ${_char} STREQUAL ${_cyp_s_space}")
        if(NOT ${_char} STREQUAL ${_cyp_s_space})
            break()
        else()
            math(EXPR global_line_indent "${global_line_indent} + 1")
            cyp_print(${global_line_indent})
        endif()
        math(EXPR _line_index "${_line_index} + 1")
    endwhile()
endmacro(cyp_get_indent)

macro(cyp_get_block _line_content)
    cyp_get_indent(${_line_content})
    #cyp_print(${global_line_indent})

endmacro(cyp_get_block)

macro(cyp_parser _yaml_string)
    set(global_string_lines ${_yaml_string})
    # message(">>>> global_string_lines=${global_string_lines}")
    unset(_yaml_string)
    foreach(line ${global_string_lines})
        cyp_get_block(${line})
    endforeach()
    #string(LENGTH ${global_yaml_string} global_yaml_string_length)
    # while(${global_index} LESS ${global_yaml_string_length})
    #     cyp_parser_char()
    # endwhile()
endmacro(cyp_parser)